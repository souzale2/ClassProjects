using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;  // for NotMapped attribute
using Microsoft.AspNetCore.Mvc;                      // for Remote attribute
using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http;

namespace Registration.Models
{
    
    public class Customer: IValidatableObject
    {
        public int ID { get; set; }  // will be autogenerated by database

        const int pLength = 5;

        [StringLength(5 + pLength)]
        [Required(ErrorMessage = "Please enter a username.")]
        [CharactersAName]
        //[RegularExpression(".*Patrick.*",
         // ErrorMessage = "Username may not contain special characters.")]
        //[RegularExpression("^[a-zA-Z0-9 ]+$")]
        public string Username { get; set; } = string.Empty;

       // [RegularExpression(".*Patrick.*", ErrorMessage = "needs to contain Patrick")]
        [StringLength(5 + pLength)]
        [Required(ErrorMessage = "Please enter an email address.")]
        [Remote("CheckEmail", "Validation")]
        [Display(Name = "Email Address")]
        public string EmailAddress { get; set; } = string.Empty;

       
        [Required(ErrorMessage = "Please enter a date of birth.")]
        [MinimumAge(13, ErrorMessage = "You must be at least 13 years old.")]
        public DateTime? DOB { get; set; }

        //[RegularExpression(".*Patrick.*", ErrorMessage = "needs to contain Patrick")]
        [StringLength(5 + pLength)]
        [Required(ErrorMessage = "Please enter a password.")]
        [Compare("ConfirmPassword")]
       // [StringLength(25,
        //    ErrorMessage = "Please limit your password to 25 characters.")]
        public string Password { get; set; } = string.Empty;

        //[RegularExpression(".*Patrick.*", ErrorMessage = "needs to contain Patrick")]
        [StringLength(5 + pLength)]
        [Required(ErrorMessage = "Please confirm your password.")]
        [Display(Name = "Confirm Password")]
        [NotMapped]
        public string ConfirmPassword { get; set; } = string.Empty;

        public IEnumerable<ValidationResult> Validate(ValidationContext ctx)
        {
            if (Username.EndsWith("Patrick"))
            {
                yield return new ValidationResult($"The username field cannot end with you name. ", 
                                new[] { nameof(Username) });
            }
            if(!Password.Contains("Patrick") || !EmailAddress.Contains("Patrick"))
            {
                yield return new ValidationResult($"The EmailAddress field and the Password must onctaion your name ",
                                new[] { nameof(EmailAddress), nameof(Password) });
            }
        }
    }
}